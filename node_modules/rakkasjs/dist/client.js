var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../../node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.production.min.js
var require_react_is_production_min = __commonJS({
  "../../node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.production.min.js"(exports) {
    "use strict";
    var b2 = "function" === typeof Symbol && Symbol.for;
    var c2 = b2 ? Symbol.for("react.element") : 60103;
    var d2 = b2 ? Symbol.for("react.portal") : 60106;
    var e2 = b2 ? Symbol.for("react.fragment") : 60107;
    var f2 = b2 ? Symbol.for("react.strict_mode") : 60108;
    var g2 = b2 ? Symbol.for("react.profiler") : 60114;
    var h2 = b2 ? Symbol.for("react.provider") : 60109;
    var k2 = b2 ? Symbol.for("react.context") : 60110;
    var l2 = b2 ? Symbol.for("react.async_mode") : 60111;
    var m2 = b2 ? Symbol.for("react.concurrent_mode") : 60111;
    var n2 = b2 ? Symbol.for("react.forward_ref") : 60112;
    var p2 = b2 ? Symbol.for("react.suspense") : 60113;
    var q2 = b2 ? Symbol.for("react.suspense_list") : 60120;
    var r2 = b2 ? Symbol.for("react.memo") : 60115;
    var t2 = b2 ? Symbol.for("react.lazy") : 60116;
    var v2 = b2 ? Symbol.for("react.block") : 60121;
    var w2 = b2 ? Symbol.for("react.fundamental") : 60117;
    var x2 = b2 ? Symbol.for("react.responder") : 60118;
    var y2 = b2 ? Symbol.for("react.scope") : 60119;
    function z2(a2) {
      if ("object" === typeof a2 && null !== a2) {
        var u2 = a2.$$typeof;
        switch (u2) {
          case c2:
            switch (a2 = a2.type, a2) {
              case l2:
              case m2:
              case e2:
              case g2:
              case f2:
              case p2:
                return a2;
              default:
                switch (a2 = a2 && a2.$$typeof, a2) {
                  case k2:
                  case n2:
                  case t2:
                  case r2:
                  case h2:
                    return a2;
                  default:
                    return u2;
                }
            }
          case d2:
            return u2;
        }
      }
    }
    function A2(a2) {
      return z2(a2) === m2;
    }
    exports.AsyncMode = l2;
    exports.ConcurrentMode = m2;
    exports.ContextConsumer = k2;
    exports.ContextProvider = h2;
    exports.Element = c2;
    exports.ForwardRef = n2;
    exports.Fragment = e2;
    exports.Lazy = t2;
    exports.Memo = r2;
    exports.Portal = d2;
    exports.Profiler = g2;
    exports.StrictMode = f2;
    exports.Suspense = p2;
    exports.isAsyncMode = function(a2) {
      return A2(a2) || z2(a2) === l2;
    };
    exports.isConcurrentMode = A2;
    exports.isContextConsumer = function(a2) {
      return z2(a2) === k2;
    };
    exports.isContextProvider = function(a2) {
      return z2(a2) === h2;
    };
    exports.isElement = function(a2) {
      return "object" === typeof a2 && null !== a2 && a2.$$typeof === c2;
    };
    exports.isForwardRef = function(a2) {
      return z2(a2) === n2;
    };
    exports.isFragment = function(a2) {
      return z2(a2) === e2;
    };
    exports.isLazy = function(a2) {
      return z2(a2) === t2;
    };
    exports.isMemo = function(a2) {
      return z2(a2) === r2;
    };
    exports.isPortal = function(a2) {
      return z2(a2) === d2;
    };
    exports.isProfiler = function(a2) {
      return z2(a2) === g2;
    };
    exports.isStrictMode = function(a2) {
      return z2(a2) === f2;
    };
    exports.isSuspense = function(a2) {
      return z2(a2) === p2;
    };
    exports.isValidElementType = function(a2) {
      return "string" === typeof a2 || "function" === typeof a2 || a2 === e2 || a2 === m2 || a2 === g2 || a2 === f2 || a2 === p2 || a2 === q2 || "object" === typeof a2 && null !== a2 && (a2.$$typeof === t2 || a2.$$typeof === r2 || a2.$$typeof === h2 || a2.$$typeof === k2 || a2.$$typeof === n2 || a2.$$typeof === w2 || a2.$$typeof === x2 || a2.$$typeof === y2 || a2.$$typeof === v2);
    };
    exports.typeOf = z2;
  }
});

// ../../node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../../node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode2 = REACT_STRICT_MODE_TYPE;
        var Suspense3 = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment2;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode2;
        exports.Suspense = Suspense3;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// ../../node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../node_modules/.pnpm/react-is@16.13.1/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module.exports = require_react_is_production_min();
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// ../../node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../../node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s2 = 1; s2 < arguments.length; s2++) {
        from = Object(arguments[s2]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// ../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// ../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (process.env.NODE_ENV !== "production") {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
      if (process.env.NODE_ENV !== "production") {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (process.env.NODE_ENV !== "production") {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// ../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (process.env.NODE_ENV !== "production") {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement2, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (process.env.NODE_ENV !== "production") {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (process.env.NODE_ENV !== "production" && typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location2, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location2, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location2, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!isValidElement2(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (process.env.NODE_ENV !== "production") {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          process.env.NODE_ENV !== "production" ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location2, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location2, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement2(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/factoryWithThrowingShims.js
var require_factoryWithThrowingShims = __commonJS({
  "../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/factoryWithThrowingShims.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    function emptyFunction() {
    }
    function emptyFunctionWithReset() {
    }
    emptyFunctionWithReset.resetWarningCache = emptyFunction;
    module.exports = function() {
      function shim(props, propName, componentName, location2, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
          return;
        }
        var err = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        err.name = "Invariant Violation";
        throw err;
      }
      ;
      shim.isRequired = shim;
      function getShim() {
        return shim;
      }
      ;
      var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
      };
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js"(exports, module) {
    if (process.env.NODE_ENV !== "production") {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = require_factoryWithThrowingShims()();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// ../../node_modules/.pnpm/react-fast-compare@3.2.0/node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "../../node_modules/.pnpm/react-fast-compare@3.2.0/node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a2, b2) {
      if (a2 === b2)
        return true;
      if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
        if (a2.constructor !== b2.constructor)
          return false;
        var length, i2, keys;
        if (Array.isArray(a2)) {
          length = a2.length;
          if (length != b2.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (!equal(a2[i2], b2[i2]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a2 instanceof Map && b2 instanceof Map) {
          if (a2.size !== b2.size)
            return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!b2.has(i2.value[0]))
              return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!equal(i2.value[1], b2.get(i2.value[0])))
              return false;
          return true;
        }
        if (hasSet && a2 instanceof Set && b2 instanceof Set) {
          if (a2.size !== b2.size)
            return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!b2.has(i2.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a2) && ArrayBuffer.isView(b2)) {
          length = a2.length;
          if (length != b2.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (a2[i2] !== b2[i2])
              return false;
          return true;
        }
        if (a2.constructor === RegExp)
          return a2.source === b2.source && a2.flags === b2.flags;
        if (a2.valueOf !== Object.prototype.valueOf)
          return a2.valueOf() === b2.valueOf();
        if (a2.toString !== Object.prototype.toString)
          return a2.toString() === b2.toString();
        keys = Object.keys(a2);
        length = keys.length;
        if (length !== Object.keys(b2).length)
          return false;
        for (i2 = length; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b2, keys[i2]))
            return false;
        if (hasElementType && a2 instanceof Element)
          return false;
        for (i2 = length; i2-- !== 0; ) {
          if ((keys[i2] === "_owner" || keys[i2] === "__v" || keys[i2] === "__o") && a2.$$typeof) {
            continue;
          }
          if (!equal(a2[keys[i2]], b2[keys[i2]]))
            return false;
        }
        return true;
      }
      return a2 !== a2 && b2 !== b2;
    }
    module.exports = function isEqual(a2, b2) {
      try {
        return equal(a2, b2);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error;
      }
    };
  }
});

// ../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js
var require_invariant = __commonJS({
  "../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js"(exports, module) {
    "use strict";
    var NODE_ENV = process.env.NODE_ENV;
    var invariant = function(condition, format, a2, b2, c2, d2, e2, f2) {
      if (NODE_ENV !== "production") {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a2, b2, c2, d2, e2, f2];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant;
  }
});

// ../../node_modules/.pnpm/shallowequal@1.1.0/node_modules/shallowequal/index.js
var require_shallowequal = __commonJS({
  "../../node_modules/.pnpm/shallowequal@1.1.0/node_modules/shallowequal/index.js"(exports, module) {
    module.exports = function shallowEqual(objA, objB, compare, compareContext) {
      var ret = compare ? compare.call(compareContext, objA, objB) : void 0;
      if (ret !== void 0) {
        return !!ret;
      }
      if (objA === objB) {
        return true;
      }
      if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
      for (var idx = 0; idx < keysA.length; idx++) {
        var key = keysA[idx];
        if (!bHasOwnProperty(key)) {
          return false;
        }
        var valueA = objA[key];
        var valueB = objB[key];
        ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (ret === false || ret === void 0 && valueA !== valueB) {
          return false;
        }
      }
      return true;
    };
  }
});

// ../../node_modules/.pnpm/@brillout+json-serializer@0.5.3/node_modules/@brillout/json-serializer/dist/cjs/types.js
var require_types = __commonJS({
  "../../node_modules/.pnpm/@brillout+json-serializer@0.5.3/node_modules/@brillout/json-serializer/dist/cjs/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.types = void 0;
    var types = [
      ts({
        is: (val) => val === void 0,
        match: (str) => str === "!undefined",
        serialize: () => "!undefined",
        deserialize: () => void 0
      }),
      ts({
        is: (val) => val === Infinity,
        match: (str) => str === "!Infinity",
        serialize: () => "!Infinity",
        deserialize: () => Infinity
      }),
      ts({
        is: (val) => val === -Infinity,
        match: (str) => str === "!-Infinity",
        serialize: () => "!-Infinity",
        deserialize: () => -Infinity
      }),
      ts({
        is: (val) => typeof val === "number" && isNaN(val),
        match: (str) => str === "!NaN",
        serialize: () => "!NaN",
        deserialize: () => NaN
      }),
      ts({
        is: (val) => val instanceof Date,
        match: (str) => str.startsWith("!Date:"),
        serialize: (val) => "!Date:" + val.toISOString(),
        deserialize: (str) => new Date(str.slice("!Date:".length))
      }),
      ts({
        is: (val) => typeof val === "bigint",
        match: (str) => str.startsWith("!BigInt:"),
        serialize: (val) => "!BigInt:" + val.toString(),
        deserialize: (str) => {
          if (typeof BigInt === "undefined") {
            throw new Error("Your JavaScript environement does not support BigInt. Consider adding a polyfill.");
          }
          return BigInt(str.slice("!BigInt:".length));
        }
      }),
      ts({
        is: (val) => val instanceof RegExp,
        match: (str) => str.startsWith("!RegExp:"),
        serialize: (val) => "!RegExp:" + val.toString(),
        deserialize: (str) => {
          str = str.slice("!RegExp:".length);
          const args = str.match(/\/(.*)\/(.*)?/);
          const pattern = args[1];
          const flags = args[2];
          return new RegExp(pattern, flags);
        }
      }),
      ts({
        is: (val) => val instanceof Map,
        match: (str) => str.startsWith("!Map:"),
        serialize: (val, serializer) => "!Map:" + serializer(Array.from(val.entries())),
        deserialize: (str, deserializer) => new Map(deserializer(str.slice("!Map:".length)))
      }),
      ts({
        is: (val) => val instanceof Set,
        match: (str) => str.startsWith("!Set:"),
        serialize: (val, serializer) => "!Set:" + serializer(Array.from(val.values())),
        deserialize: (str, deserializer) => new Set(deserializer(str.slice("!Set:".length)))
      }),
      // Avoid collisions with the special strings defined above
      ts({
        is: (val) => typeof val === "string" && val.startsWith("!"),
        match: (str) => str.startsWith("!"),
        serialize: (val) => "!" + val,
        deserialize: (str) => str.slice(1)
      })
    ];
    exports.types = types;
    function ts(t2) {
      return t2;
    }
  }
});

// ../../node_modules/.pnpm/@brillout+json-serializer@0.5.3/node_modules/@brillout/json-serializer/dist/cjs/utils/isReactElement.js
var require_isReactElement = __commonJS({
  "../../node_modules/.pnpm/@brillout+json-serializer@0.5.3/node_modules/@brillout/json-serializer/dist/cjs/utils/isReactElement.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isReactElement = void 0;
    function isReactElement(value) {
      return typeof value === "object" && value !== null && String(value["$$typeof"]) === "Symbol(react.element)";
    }
    exports.isReactElement = isReactElement;
  }
});

// ../../node_modules/.pnpm/@brillout+json-serializer@0.5.3/node_modules/@brillout/json-serializer/dist/cjs/utils/isCallable.js
var require_isCallable = __commonJS({
  "../../node_modules/.pnpm/@brillout+json-serializer@0.5.3/node_modules/@brillout/json-serializer/dist/cjs/utils/isCallable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCallable = void 0;
    function isCallable(thing) {
      return thing instanceof Function || typeof thing === "function";
    }
    exports.isCallable = isCallable;
  }
});

// ../../node_modules/.pnpm/@brillout+json-serializer@0.5.3/node_modules/@brillout/json-serializer/dist/cjs/utils/isObject.js
var require_isObject = __commonJS({
  "../../node_modules/.pnpm/@brillout+json-serializer@0.5.3/node_modules/@brillout/json-serializer/dist/cjs/utils/isObject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObject = void 0;
    function isObject(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      if (Array.isArray(value)) {
        return false;
      }
      return true;
    }
    exports.isObject = isObject;
  }
});

// ../../node_modules/.pnpm/@brillout+json-serializer@0.5.3/node_modules/@brillout/json-serializer/dist/cjs/stringify.js
var require_stringify = __commonJS({
  "../../node_modules/.pnpm/@brillout+json-serializer@0.5.3/node_modules/@brillout/json-serializer/dist/cjs/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringify = void 0;
    var types_1 = require_types();
    var isReactElement_1 = require_isReactElement();
    var isCallable_1 = require_isCallable();
    var isObject_1 = require_isObject();
    function stringify3(value, { forbidReactElements, space, valueName = "value", sortObjectKeys } = {}) {
      const path = [];
      const serializer = (val) => JSON.stringify(val, replacer, space);
      return serializer(value);
      function replacer(key, value2) {
        if (key !== "") {
          path.push(key);
        }
        if (forbidReactElements && (0, isReactElement_1.isReactElement)(value2)) {
          throw new Error(genErrMsg("React element"));
        }
        if ((0, isCallable_1.isCallable)(value2)) {
          const functionName = value2.name;
          throw new Error(genErrMsg("function", path.length === 0 ? functionName : void 0));
        }
        const valueOriginal = this[key];
        for (const { is, serialize } of types_1.types.slice().reverse()) {
          if (is(valueOriginal)) {
            return serialize(valueOriginal, serializer);
          }
        }
        if (sortObjectKeys && (0, isObject_1.isObject)(value2)) {
          const copy = {};
          Object.keys(value2).sort().forEach((key2) => {
            copy[key2] = value2[key2];
          });
          value2 = copy;
        }
        return value2;
      }
      function genErrMsg(valueType, valName) {
        const name = valName ? " `" + valName + "`" : "";
        const location2 = path.length === 0 ? "" : ` ${name ? "at " : ""}\`${valueName}[${path.map((p2) => `'${p2}'`).join("][")}]\``;
        const fallback = name === "" && location2 === "" ? ` ${valueName}` : "";
        return `Cannot serialize${name}${location2}${fallback} because it is a ${valueType} (https://github.com/brillout/json-serializer)`;
      }
    }
    exports.stringify = stringify3;
  }
});

// src/features/head/lib.tsx
import * as React from "react";

// ../../node_modules/.pnpm/react-helmet-async@1.3.0_react-dom@18.2.0_react@18.2.0/node_modules/react-helmet-async/lib/index.module.js
var import_prop_types = __toESM(require_prop_types());
var import_react_fast_compare = __toESM(require_react_fast_compare());
var import_invariant = __toESM(require_invariant());
var import_shallowequal = __toESM(require_shallowequal());
import * as t from "react";
const { Component: e } = t;
function a() {
  return a = Object.assign || function(t2) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var r2 = arguments[e2];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (t2[n2] = r2[n2]);
    }
    return t2;
  }, a.apply(this, arguments);
}
function s(t2, e2) {
  t2.prototype = Object.create(e2.prototype), t2.prototype.constructor = t2, c(t2, e2);
}
function c(t2, e2) {
  return c = Object.setPrototypeOf || function(t3, e3) {
    return t3.__proto__ = e3, t3;
  }, c(t2, e2);
}
function u(t2, e2) {
  if (null == t2)
    return {};
  var r2, n2, i2 = {}, o2 = Object.keys(t2);
  for (n2 = 0; n2 < o2.length; n2++)
    e2.indexOf(r2 = o2[n2]) >= 0 || (i2[r2] = t2[r2]);
  return i2;
}
var l = { BASE: "base", BODY: "body", HEAD: "head", HTML: "html", LINK: "link", META: "meta", NOSCRIPT: "noscript", SCRIPT: "script", STYLE: "style", TITLE: "title", FRAGMENT: "Symbol(react.fragment)" };
var p = { rel: ["amphtml", "canonical", "alternate"] };
var f = { type: ["application/ld+json"] };
var d = { charset: "", name: ["robots", "description"], property: ["og:type", "og:title", "og:url", "og:image", "og:image:alt", "og:description", "twitter:url", "twitter:title", "twitter:description", "twitter:image", "twitter:image:alt", "twitter:card", "twitter:site"] };
var h = Object.keys(l).map(function(t2) {
  return l[t2];
});
var m = { accesskey: "accessKey", charset: "charSet", class: "className", contenteditable: "contentEditable", contextmenu: "contextMenu", "http-equiv": "httpEquiv", itemprop: "itemProp", tabindex: "tabIndex" };
var y = Object.keys(m).reduce(function(t2, e2) {
  return t2[m[e2]] = e2, t2;
}, {});
var T = function(t2, e2) {
  for (var r2 = t2.length - 1; r2 >= 0; r2 -= 1) {
    var n2 = t2[r2];
    if (Object.prototype.hasOwnProperty.call(n2, e2))
      return n2[e2];
  }
  return null;
};
var g = function(t2) {
  var e2 = T(t2, l.TITLE), r2 = T(t2, "titleTemplate");
  if (Array.isArray(e2) && (e2 = e2.join("")), r2 && e2)
    return r2.replace(/%s/g, function() {
      return e2;
    });
  var n2 = T(t2, "defaultTitle");
  return e2 || n2 || void 0;
};
var b = function(t2) {
  return T(t2, "onChangeClientState") || function() {
  };
};
var v = function(t2, e2) {
  return e2.filter(function(e3) {
    return void 0 !== e3[t2];
  }).map(function(e3) {
    return e3[t2];
  }).reduce(function(t3, e3) {
    return a({}, t3, e3);
  }, {});
};
var A = function(t2, e2) {
  return e2.filter(function(t3) {
    return void 0 !== t3[l.BASE];
  }).map(function(t3) {
    return t3[l.BASE];
  }).reverse().reduce(function(e3, r2) {
    if (!e3.length)
      for (var n2 = Object.keys(r2), i2 = 0; i2 < n2.length; i2 += 1) {
        var o2 = n2[i2].toLowerCase();
        if (-1 !== t2.indexOf(o2) && r2[o2])
          return e3.concat(r2);
      }
    return e3;
  }, []);
};
var C = function(t2, e2, r2) {
  var n2 = {};
  return r2.filter(function(e3) {
    return !!Array.isArray(e3[t2]) || (void 0 !== e3[t2] && console && "function" == typeof console.warn && console.warn("Helmet: " + t2 + ' should be of type "Array". Instead found type "' + typeof e3[t2] + '"'), false);
  }).map(function(e3) {
    return e3[t2];
  }).reverse().reduce(function(t3, r3) {
    var i2 = {};
    r3.filter(function(t4) {
      for (var r4, o3 = Object.keys(t4), a2 = 0; a2 < o3.length; a2 += 1) {
        var s3 = o3[a2], c3 = s3.toLowerCase();
        -1 === e2.indexOf(c3) || "rel" === r4 && "canonical" === t4[r4].toLowerCase() || "rel" === c3 && "stylesheet" === t4[c3].toLowerCase() || (r4 = c3), -1 === e2.indexOf(s3) || "innerHTML" !== s3 && "cssText" !== s3 && "itemprop" !== s3 || (r4 = s3);
      }
      if (!r4 || !t4[r4])
        return false;
      var u3 = t4[r4].toLowerCase();
      return n2[r4] || (n2[r4] = {}), i2[r4] || (i2[r4] = {}), !n2[r4][u3] && (i2[r4][u3] = true, true);
    }).reverse().forEach(function(e3) {
      return t3.push(e3);
    });
    for (var o2 = Object.keys(i2), s2 = 0; s2 < o2.length; s2 += 1) {
      var c2 = o2[s2], u2 = a({}, n2[c2], i2[c2]);
      n2[c2] = u2;
    }
    return t3;
  }, []).reverse();
};
var O = function(t2, e2) {
  if (Array.isArray(t2) && t2.length) {
    for (var r2 = 0; r2 < t2.length; r2 += 1)
      if (t2[r2][e2])
        return true;
  }
  return false;
};
var S = function(t2) {
  return Array.isArray(t2) ? t2.join("") : t2;
};
var E = function(t2, e2) {
  return Array.isArray(t2) ? t2.reduce(function(t3, r2) {
    return function(t4, e3) {
      for (var r3 = Object.keys(t4), n2 = 0; n2 < r3.length; n2 += 1)
        if (e3[r3[n2]] && e3[r3[n2]].includes(t4[r3[n2]]))
          return true;
      return false;
    }(r2, e2) ? t3.priority.push(r2) : t3.default.push(r2), t3;
  }, { priority: [], default: [] }) : { default: t2 };
};
var I = function(t2, e2) {
  var r2;
  return a({}, t2, ((r2 = {})[e2] = void 0, r2));
};
var P = [l.NOSCRIPT, l.SCRIPT, l.STYLE];
var w = function(t2, e2) {
  return void 0 === e2 && (e2 = true), false === e2 ? String(t2) : String(t2).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
};
var x = function(t2) {
  return Object.keys(t2).reduce(function(e2, r2) {
    var n2 = void 0 !== t2[r2] ? r2 + '="' + t2[r2] + '"' : "" + r2;
    return e2 ? e2 + " " + n2 : n2;
  }, "");
};
var L = function(t2, e2) {
  return void 0 === e2 && (e2 = {}), Object.keys(t2).reduce(function(e3, r2) {
    return e3[m[r2] || r2] = t2[r2], e3;
  }, e2);
};
var j = function(e2, r2) {
  return r2.map(function(r3, n2) {
    var i2, o2 = ((i2 = { key: n2 })["data-rh"] = true, i2);
    return Object.keys(r3).forEach(function(t2) {
      var e3 = m[t2] || t2;
      "innerHTML" === e3 || "cssText" === e3 ? o2.dangerouslySetInnerHTML = { __html: r3.innerHTML || r3.cssText } : o2[e3] = r3[t2];
    }), t.createElement(e2, o2);
  });
};
var M = function(e2, r2, n2) {
  switch (e2) {
    case l.TITLE:
      return { toComponent: function() {
        return n3 = r2.titleAttributes, (i2 = { key: e3 = r2.title })["data-rh"] = true, o2 = L(n3, i2), [t.createElement(l.TITLE, o2, e3)];
        var e3, n3, i2, o2;
      }, toString: function() {
        return function(t2, e3, r3, n3) {
          var i2 = x(r3), o2 = S(e3);
          return i2 ? "<" + t2 + ' data-rh="true" ' + i2 + ">" + w(o2, n3) + "</" + t2 + ">" : "<" + t2 + ' data-rh="true">' + w(o2, n3) + "</" + t2 + ">";
        }(e2, r2.title, r2.titleAttributes, n2);
      } };
    case "bodyAttributes":
    case "htmlAttributes":
      return { toComponent: function() {
        return L(r2);
      }, toString: function() {
        return x(r2);
      } };
    default:
      return { toComponent: function() {
        return j(e2, r2);
      }, toString: function() {
        return function(t2, e3, r3) {
          return e3.reduce(function(e4, n3) {
            var i2 = Object.keys(n3).filter(function(t3) {
              return !("innerHTML" === t3 || "cssText" === t3);
            }).reduce(function(t3, e5) {
              var i3 = void 0 === n3[e5] ? e5 : e5 + '="' + w(n3[e5], r3) + '"';
              return t3 ? t3 + " " + i3 : i3;
            }, ""), o2 = n3.innerHTML || n3.cssText || "", a2 = -1 === P.indexOf(t2);
            return e4 + "<" + t2 + ' data-rh="true" ' + i2 + (a2 ? "/>" : ">" + o2 + "</" + t2 + ">");
          }, "");
        }(e2, r2, n2);
      } };
  }
};
var k = function(t2) {
  var e2 = t2.baseTag, r2 = t2.bodyAttributes, n2 = t2.encode, i2 = t2.htmlAttributes, o2 = t2.noscriptTags, a2 = t2.styleTags, s2 = t2.title, c2 = void 0 === s2 ? "" : s2, u2 = t2.titleAttributes, h2 = t2.linkTags, m2 = t2.metaTags, y2 = t2.scriptTags, T2 = { toComponent: function() {
  }, toString: function() {
    return "";
  } };
  if (t2.prioritizeSeoTags) {
    var g2 = function(t3) {
      var e3 = t3.linkTags, r3 = t3.scriptTags, n3 = t3.encode, i3 = E(t3.metaTags, d), o3 = E(e3, p), a3 = E(r3, f);
      return { priorityMethods: { toComponent: function() {
        return [].concat(j(l.META, i3.priority), j(l.LINK, o3.priority), j(l.SCRIPT, a3.priority));
      }, toString: function() {
        return M(l.META, i3.priority, n3) + " " + M(l.LINK, o3.priority, n3) + " " + M(l.SCRIPT, a3.priority, n3);
      } }, metaTags: i3.default, linkTags: o3.default, scriptTags: a3.default };
    }(t2);
    T2 = g2.priorityMethods, h2 = g2.linkTags, m2 = g2.metaTags, y2 = g2.scriptTags;
  }
  return { priority: T2, base: M(l.BASE, e2, n2), bodyAttributes: M("bodyAttributes", r2, n2), htmlAttributes: M("htmlAttributes", i2, n2), link: M(l.LINK, h2, n2), meta: M(l.META, m2, n2), noscript: M(l.NOSCRIPT, o2, n2), script: M(l.SCRIPT, y2, n2), style: M(l.STYLE, a2, n2), title: M(l.TITLE, { title: c2, titleAttributes: u2 }, n2) };
};
var H = [];
var N = function(t2, e2) {
  var r2 = this;
  void 0 === e2 && (e2 = "undefined" != typeof document), this.instances = [], this.value = { setHelmet: function(t3) {
    r2.context.helmet = t3;
  }, helmetInstances: { get: function() {
    return r2.canUseDOM ? H : r2.instances;
  }, add: function(t3) {
    (r2.canUseDOM ? H : r2.instances).push(t3);
  }, remove: function(t3) {
    var e3 = (r2.canUseDOM ? H : r2.instances).indexOf(t3);
    (r2.canUseDOM ? H : r2.instances).splice(e3, 1);
  } } }, this.context = t2, this.canUseDOM = e2, e2 || (t2.helmet = k({ baseTag: [], bodyAttributes: {}, encodeSpecialCharacters: true, htmlAttributes: {}, linkTags: [], metaTags: [], noscriptTags: [], scriptTags: [], styleTags: [], title: "", titleAttributes: {} }));
};
var R = t.createContext({});
var D = import_prop_types.default.shape({ setHelmet: import_prop_types.default.func, helmetInstances: import_prop_types.default.shape({ get: import_prop_types.default.func, add: import_prop_types.default.func, remove: import_prop_types.default.func }) });
var U = "undefined" != typeof document;
var q = /* @__PURE__ */ function(e2) {
  function r2(t2) {
    var n2;
    return (n2 = e2.call(this, t2) || this).helmetData = new N(n2.props.context, r2.canUseDOM), n2;
  }
  return s(r2, e2), r2.prototype.render = function() {
    return t.createElement(R.Provider, { value: this.helmetData.value }, this.props.children);
  }, r2;
}(e);
q.canUseDOM = U, q.propTypes = { context: import_prop_types.default.shape({ helmet: import_prop_types.default.shape() }), children: import_prop_types.default.node.isRequired }, q.defaultProps = { context: {} }, q.displayName = "HelmetProvider";
var Y = function(t2, e2) {
  var r2, n2 = document.head || document.querySelector(l.HEAD), i2 = n2.querySelectorAll(t2 + "[data-rh]"), o2 = [].slice.call(i2), a2 = [];
  return e2 && e2.length && e2.forEach(function(e3) {
    var n3 = document.createElement(t2);
    for (var i3 in e3)
      Object.prototype.hasOwnProperty.call(e3, i3) && ("innerHTML" === i3 ? n3.innerHTML = e3.innerHTML : "cssText" === i3 ? n3.styleSheet ? n3.styleSheet.cssText = e3.cssText : n3.appendChild(document.createTextNode(e3.cssText)) : n3.setAttribute(i3, void 0 === e3[i3] ? "" : e3[i3]));
    n3.setAttribute("data-rh", "true"), o2.some(function(t3, e4) {
      return r2 = e4, n3.isEqualNode(t3);
    }) ? o2.splice(r2, 1) : a2.push(n3);
  }), o2.forEach(function(t3) {
    return t3.parentNode.removeChild(t3);
  }), a2.forEach(function(t3) {
    return n2.appendChild(t3);
  }), { oldTags: o2, newTags: a2 };
};
var B = function(t2, e2) {
  var r2 = document.getElementsByTagName(t2)[0];
  if (r2) {
    for (var n2 = r2.getAttribute("data-rh"), i2 = n2 ? n2.split(",") : [], o2 = [].concat(i2), a2 = Object.keys(e2), s2 = 0; s2 < a2.length; s2 += 1) {
      var c2 = a2[s2], u2 = e2[c2] || "";
      r2.getAttribute(c2) !== u2 && r2.setAttribute(c2, u2), -1 === i2.indexOf(c2) && i2.push(c2);
      var l2 = o2.indexOf(c2);
      -1 !== l2 && o2.splice(l2, 1);
    }
    for (var p2 = o2.length - 1; p2 >= 0; p2 -= 1)
      r2.removeAttribute(o2[p2]);
    i2.length === o2.length ? r2.removeAttribute("data-rh") : r2.getAttribute("data-rh") !== a2.join(",") && r2.setAttribute("data-rh", a2.join(","));
  }
};
var K = function(t2, e2) {
  var r2 = t2.baseTag, n2 = t2.htmlAttributes, i2 = t2.linkTags, o2 = t2.metaTags, a2 = t2.noscriptTags, s2 = t2.onChangeClientState, c2 = t2.scriptTags, u2 = t2.styleTags, p2 = t2.title, f2 = t2.titleAttributes;
  B(l.BODY, t2.bodyAttributes), B(l.HTML, n2), function(t3, e3) {
    void 0 !== t3 && document.title !== t3 && (document.title = S(t3)), B(l.TITLE, e3);
  }(p2, f2);
  var d2 = { baseTag: Y(l.BASE, r2), linkTags: Y(l.LINK, i2), metaTags: Y(l.META, o2), noscriptTags: Y(l.NOSCRIPT, a2), scriptTags: Y(l.SCRIPT, c2), styleTags: Y(l.STYLE, u2) }, h2 = {}, m2 = {};
  Object.keys(d2).forEach(function(t3) {
    var e3 = d2[t3], r3 = e3.newTags, n3 = e3.oldTags;
    r3.length && (h2[t3] = r3), n3.length && (m2[t3] = d2[t3].oldTags);
  }), e2 && e2(), s2(t2, h2, m2);
};
var _ = null;
var z = /* @__PURE__ */ function(t2) {
  function e2() {
    for (var e3, r3 = arguments.length, n2 = new Array(r3), i2 = 0; i2 < r3; i2++)
      n2[i2] = arguments[i2];
    return (e3 = t2.call.apply(t2, [this].concat(n2)) || this).rendered = false, e3;
  }
  s(e2, t2);
  var r2 = e2.prototype;
  return r2.shouldComponentUpdate = function(t3) {
    return !(0, import_shallowequal.default)(t3, this.props);
  }, r2.componentDidUpdate = function() {
    this.emitChange();
  }, r2.componentWillUnmount = function() {
    this.props.context.helmetInstances.remove(this), this.emitChange();
  }, r2.emitChange = function() {
    var t3, e3, r3 = this.props.context, n2 = r3.setHelmet, i2 = null, o2 = (t3 = r3.helmetInstances.get().map(function(t4) {
      var e4 = a({}, t4.props);
      return delete e4.context, e4;
    }), { baseTag: A(["href"], t3), bodyAttributes: v("bodyAttributes", t3), defer: T(t3, "defer"), encode: T(t3, "encodeSpecialCharacters"), htmlAttributes: v("htmlAttributes", t3), linkTags: C(l.LINK, ["rel", "href"], t3), metaTags: C(l.META, ["name", "charset", "http-equiv", "property", "itemprop"], t3), noscriptTags: C(l.NOSCRIPT, ["innerHTML"], t3), onChangeClientState: b(t3), scriptTags: C(l.SCRIPT, ["src", "innerHTML"], t3), styleTags: C(l.STYLE, ["cssText"], t3), title: g(t3), titleAttributes: v("titleAttributes", t3), prioritizeSeoTags: O(t3, "prioritizeSeoTags") });
    q.canUseDOM ? (e3 = o2, _ && cancelAnimationFrame(_), e3.defer ? _ = requestAnimationFrame(function() {
      K(e3, function() {
        _ = null;
      });
    }) : (K(e3), _ = null)) : k && (i2 = k(o2)), n2(i2);
  }, r2.init = function() {
    this.rendered || (this.rendered = true, this.props.context.helmetInstances.add(this), this.emitChange());
  }, r2.render = function() {
    return this.init(), null;
  }, e2;
}(e);
z.propTypes = { context: D.isRequired }, z.displayName = "HelmetDispatcher";
var F = ["children"];
var G = ["children"];
var W = /* @__PURE__ */ function(e2) {
  function r2() {
    return e2.apply(this, arguments) || this;
  }
  s(r2, e2);
  var o2 = r2.prototype;
  return o2.shouldComponentUpdate = function(t2) {
    return !(0, import_react_fast_compare.default)(I(this.props, "helmetData"), I(t2, "helmetData"));
  }, o2.mapNestedChildrenToProps = function(t2, e3) {
    if (!e3)
      return null;
    switch (t2.type) {
      case l.SCRIPT:
      case l.NOSCRIPT:
        return { innerHTML: e3 };
      case l.STYLE:
        return { cssText: e3 };
      default:
        throw new Error("<" + t2.type + " /> elements are self-closing and can not contain children. Refer to our API for more information.");
    }
  }, o2.flattenArrayTypeChildren = function(t2) {
    var e3, r3 = t2.child, n2 = t2.arrayTypeChildren;
    return a({}, n2, ((e3 = {})[r3.type] = [].concat(n2[r3.type] || [], [a({}, t2.newChildProps, this.mapNestedChildrenToProps(r3, t2.nestedChildren))]), e3));
  }, o2.mapObjectTypeChildren = function(t2) {
    var e3, r3, n2 = t2.child, i2 = t2.newProps, o3 = t2.newChildProps, s2 = t2.nestedChildren;
    switch (n2.type) {
      case l.TITLE:
        return a({}, i2, ((e3 = {})[n2.type] = s2, e3.titleAttributes = a({}, o3), e3));
      case l.BODY:
        return a({}, i2, { bodyAttributes: a({}, o3) });
      case l.HTML:
        return a({}, i2, { htmlAttributes: a({}, o3) });
      default:
        return a({}, i2, ((r3 = {})[n2.type] = a({}, o3), r3));
    }
  }, o2.mapArrayTypeChildrenToProps = function(t2, e3) {
    var r3 = a({}, e3);
    return Object.keys(t2).forEach(function(e4) {
      var n2;
      r3 = a({}, r3, ((n2 = {})[e4] = t2[e4], n2));
    }), r3;
  }, o2.warnOnInvalidChildren = function(t2, e3) {
    return (0, import_invariant.default)(h.some(function(e4) {
      return t2.type === e4;
    }), "function" == typeof t2.type ? "You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information." : "Only elements types " + h.join(", ") + " are allowed. Helmet does not support rendering <" + t2.type + "> elements. Refer to our API for more information."), (0, import_invariant.default)(!e3 || "string" == typeof e3 || Array.isArray(e3) && !e3.some(function(t3) {
      return "string" != typeof t3;
    }), "Helmet expects a string as a child of <" + t2.type + ">. Did you forget to wrap your children in braces? ( <" + t2.type + ">{``}</" + t2.type + "> ) Refer to our API for more information."), true;
  }, o2.mapChildrenToProps = function(e3, r3) {
    var n2 = this, i2 = {};
    return t.Children.forEach(e3, function(t2) {
      if (t2 && t2.props) {
        var e4 = t2.props, o3 = e4.children, a2 = u(e4, F), s2 = Object.keys(a2).reduce(function(t3, e5) {
          return t3[y[e5] || e5] = a2[e5], t3;
        }, {}), c2 = t2.type;
        switch ("symbol" == typeof c2 ? c2 = c2.toString() : n2.warnOnInvalidChildren(t2, o3), c2) {
          case l.FRAGMENT:
            r3 = n2.mapChildrenToProps(o3, r3);
            break;
          case l.LINK:
          case l.META:
          case l.NOSCRIPT:
          case l.SCRIPT:
          case l.STYLE:
            i2 = n2.flattenArrayTypeChildren({ child: t2, arrayTypeChildren: i2, newChildProps: s2, nestedChildren: o3 });
            break;
          default:
            r3 = n2.mapObjectTypeChildren({ child: t2, newProps: r3, newChildProps: s2, nestedChildren: o3 });
        }
      }
    }), this.mapArrayTypeChildrenToProps(i2, r3);
  }, o2.render = function() {
    var e3 = this.props, r3 = e3.children, n2 = u(e3, G), i2 = a({}, n2), o3 = n2.helmetData;
    return r3 && (i2 = this.mapChildrenToProps(r3, i2)), !o3 || o3 instanceof N || (o3 = new N(o3.context, o3.instances)), o3 ? /* @__PURE__ */ t.createElement(z, a({}, i2, { context: o3.value, helmetData: void 0 })) : /* @__PURE__ */ t.createElement(R.Consumer, null, function(e4) {
      return t.createElement(z, a({}, i2, { context: e4 }));
    });
  }, r2;
}(e);
W.propTypes = { base: import_prop_types.default.object, bodyAttributes: import_prop_types.default.object, children: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.node), import_prop_types.default.node]), defaultTitle: import_prop_types.default.string, defer: import_prop_types.default.bool, encodeSpecialCharacters: import_prop_types.default.bool, htmlAttributes: import_prop_types.default.object, link: import_prop_types.default.arrayOf(import_prop_types.default.object), meta: import_prop_types.default.arrayOf(import_prop_types.default.object), noscript: import_prop_types.default.arrayOf(import_prop_types.default.object), onChangeClientState: import_prop_types.default.func, script: import_prop_types.default.arrayOf(import_prop_types.default.object), style: import_prop_types.default.arrayOf(import_prop_types.default.object), title: import_prop_types.default.string, titleAttributes: import_prop_types.default.object, titleTemplate: import_prop_types.default.string, prioritizeSeoTags: import_prop_types.default.bool, helmetData: import_prop_types.default.object }, W.defaultProps = { defer: true, encodeSpecialCharacters: true, prioritizeSeoTags: false }, W.displayName = "Helmet";

// src/features/head/lib.tsx
function Head(props) {
  return /* @__PURE__ */ React.createElement(W, { ...props });
}

// src/features/use-query/implementation.ts
import * as __REACT_IMPORT__1 from "react";
const {
  useContext,
  useEffect,
  useMemo,
  useState,
  useSyncExternalStore
} = __REACT_IMPORT__1;

// src/runtime/named-context.ts
import * as __REACT_IMPORT__2 from "react";
const { createContext } = __REACT_IMPORT__2;
function createNamedContext(name, defaultValue) {
  if (process.env.NODE_ENV === "production") {
    return createContext(defaultValue);
  }
  name = `__rakkasjs_context_${name}__`;
  const existing = globalThis[name];
  if (existing) {
    return existing;
  }
  const context = createContext(defaultValue);
  globalThis[name] = context;
  return context;
}

// src/runtime/isomorphic-context.ts
var IsomorphicContext = createNamedContext(
  "IsomorphicContext",
  void 0
);
var ServerSideContext = createNamedContext(
  "ServerSideContext",
  void 0
);

// ../../node_modules/.pnpm/@microsoft+fetch-event-source@2.0.1/node_modules/@microsoft/fetch-event-source/lib/esm/parse.js
async function getBytes(stream, onChunk) {
  const reader = stream.getReader();
  let result;
  while (!(result = await reader.read()).done) {
    onChunk(result.value);
  }
}
function getLines(onLine) {
  let buffer;
  let position;
  let fieldLength;
  let discardTrailingNewline = false;
  return function onChunk(arr) {
    if (buffer === void 0) {
      buffer = arr;
      position = 0;
      fieldLength = -1;
    } else {
      buffer = concat(buffer, arr);
    }
    const bufLength = buffer.length;
    let lineStart = 0;
    while (position < bufLength) {
      if (discardTrailingNewline) {
        if (buffer[position] === 10) {
          lineStart = ++position;
        }
        discardTrailingNewline = false;
      }
      let lineEnd = -1;
      for (; position < bufLength && lineEnd === -1; ++position) {
        switch (buffer[position]) {
          case 58:
            if (fieldLength === -1) {
              fieldLength = position - lineStart;
            }
            break;
          case 13:
            discardTrailingNewline = true;
          case 10:
            lineEnd = position;
            break;
        }
      }
      if (lineEnd === -1) {
        break;
      }
      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);
      lineStart = position;
      fieldLength = -1;
    }
    if (lineStart === bufLength) {
      buffer = void 0;
    } else if (lineStart !== 0) {
      buffer = buffer.subarray(lineStart);
      position -= lineStart;
    }
  };
}
function getMessages(onId, onRetry, onMessage) {
  let message = newMessage();
  const decoder = new TextDecoder();
  return function onLine(line, fieldLength) {
    if (line.length === 0) {
      onMessage === null || onMessage === void 0 ? void 0 : onMessage(message);
      message = newMessage();
    } else if (fieldLength > 0) {
      const field = decoder.decode(line.subarray(0, fieldLength));
      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 ? 2 : 1);
      const value = decoder.decode(line.subarray(valueOffset));
      switch (field) {
        case "data":
          message.data = message.data ? message.data + "\n" + value : value;
          break;
        case "event":
          message.event = value;
          break;
        case "id":
          onId(message.id = value);
          break;
        case "retry":
          const retry = parseInt(value, 10);
          if (!isNaN(retry)) {
            onRetry(message.retry = retry);
          }
          break;
      }
    }
  };
}
function concat(a2, b2) {
  const res = new Uint8Array(a2.length + b2.length);
  res.set(a2);
  res.set(b2, a2.length);
  return res;
}
function newMessage() {
  return {
    data: "",
    event: "",
    id: "",
    retry: void 0
  };
}

// ../../node_modules/.pnpm/@microsoft+fetch-event-source@2.0.1/node_modules/@microsoft/fetch-event-source/lib/esm/fetch.js
var __rest = function(s2, e2) {
  var t2 = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
      t2[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
      if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t2[p2[i2]] = s2[p2[i2]];
    }
  return t2;
};
var EventStreamContentType = "text/event-stream";
var DefaultRetryInterval = 1e3;
var LastEventId = "last-event-id";
function fetchEventSource(input, _a) {
  var { signal: inputSignal, headers: inputHeaders, onopen: inputOnOpen, onmessage, onclose, onerror, openWhenHidden, fetch: inputFetch } = _a, rest = __rest(_a, ["signal", "headers", "onopen", "onmessage", "onclose", "onerror", "openWhenHidden", "fetch"]);
  return new Promise((resolve, reject) => {
    const headers = Object.assign({}, inputHeaders);
    if (!headers.accept) {
      headers.accept = EventStreamContentType;
    }
    let curRequestController;
    function onVisibilityChange() {
      curRequestController.abort();
      if (!document.hidden) {
        create();
      }
    }
    if (!openWhenHidden) {
      document.addEventListener("visibilitychange", onVisibilityChange);
    }
    let retryInterval = DefaultRetryInterval;
    let retryTimer = 0;
    function dispose() {
      document.removeEventListener("visibilitychange", onVisibilityChange);
      window.clearTimeout(retryTimer);
      curRequestController.abort();
    }
    inputSignal === null || inputSignal === void 0 ? void 0 : inputSignal.addEventListener("abort", () => {
      dispose();
      resolve();
    });
    const fetch2 = inputFetch !== null && inputFetch !== void 0 ? inputFetch : window.fetch;
    const onopen = inputOnOpen !== null && inputOnOpen !== void 0 ? inputOnOpen : defaultOnOpen;
    async function create() {
      var _a2;
      curRequestController = new AbortController();
      try {
        const response = await fetch2(input, Object.assign(Object.assign({}, rest), { headers, signal: curRequestController.signal }));
        await onopen(response);
        await getBytes(response.body, getLines(getMessages((id) => {
          if (id) {
            headers[LastEventId] = id;
          } else {
            delete headers[LastEventId];
          }
        }, (retry) => {
          retryInterval = retry;
        }, onmessage)));
        onclose === null || onclose === void 0 ? void 0 : onclose();
        dispose();
        resolve();
      } catch (err) {
        if (!curRequestController.signal.aborted) {
          try {
            const interval = (_a2 = onerror === null || onerror === void 0 ? void 0 : onerror(err)) !== null && _a2 !== void 0 ? _a2 : retryInterval;
            window.clearTimeout(retryTimer);
            retryTimer = window.setTimeout(create, interval);
          } catch (innerErr) {
            dispose();
            reject(innerErr);
          }
        }
      }
    }
    create();
  });
}
function defaultOnOpen(response) {
  const contentType = response.headers.get("content-type");
  if (!(contentType === null || contentType === void 0 ? void 0 : contentType.startsWith(EventStreamContentType))) {
    throw new Error(`Expected content-type to be ${EventStreamContentType}, Actual: ${contentType}`);
  }
}

// src/features/use-query/implementation.ts
var QueryCacheContext = createNamedContext(
  "QueryCacheContext",
  void 0
);
var DEFAULT_QUERY_OPTIONS = {
  cacheTime: 5 * 60 * 1e3,
  staleTime: 100,
  refetchOnMount: false,
  refetchOnWindowFocus: false,
  refetchInterval: false,
  refetchIntervalInBackground: false,
  refetchOnReconnect: false
};
function usePageContext() {
  return useContext(IsomorphicContext);
}
function useQuery(key, fn, options = {}) {
  const fullOptions = { ...DEFAULT_QUERY_OPTIONS, ...options };
  const result = useQueryBase(key, fn, fullOptions);
  useRefetch(result, fullOptions);
  return result;
}
function useEventSource(url) {
  const [result, setResult] = useState({});
  const errorHandler = useErrorHandler();
  useEffect(() => {
    const ctrl = new AbortController();
    fetchEventSource(url, {
      credentials: "include",
      signal: ctrl.signal,
      async onopen(response) {
        const { ok, status, headers } = response;
        if (ok && headers.get("content-type") === EventStreamContentType)
          return;
        const error = new Error(await response.text());
        if (status >= 400 && status < 500 && status !== 429)
          return errorHandler(error);
        throw error;
      },
      onclose() {
        throw new Error();
      },
      onmessage({ data }) {
        setResult({
          data: (0, eval)("(" + data + ")"),
          dataUpdatedAt: Date.now()
        });
      }
    }).catch(errorHandler);
    return () => ctrl.abort();
  }, [url, errorHandler, setResult]);
  return result;
}
function useQueryBase(key, fn, options) {
  const { cacheTime, staleTime, refetchOnMount } = options;
  const cache2 = useContext(QueryCacheContext);
  const item = useSyncExternalStore(
    (onStoreChange) => {
      if (key !== void 0) {
        return cache2.subscribe(key, () => {
          onStoreChange();
        });
      } else {
        return () => {
        };
      }
    },
    () => key === void 0 ? void 0 : cache2.get(key),
    () => key === void 0 ? void 0 : cache2.get(key)
  );
  const ctx = usePageContext();
  useEffect(() => {
    const cacheItem = key ? cache2.get(key) : void 0;
    if (cacheItem === void 0) {
      return;
    }
    if ((cacheItem.invalid || refetchOnMount && (refetchOnMount === "always" || !cacheItem.date || staleTime <= Date.now() - cacheItem.date)) && !cacheItem.promise && !cacheItem.hydrated) {
      const promiseOrValue = fn(ctx);
      cache2.set(key, promiseOrValue, cacheTime);
    }
    cacheItem.hydrated = false;
  }, [key, item == null ? void 0 : item.invalid]);
  const queryResultReference = useMemo(() => ({}), []);
  if (key === void 0) {
    return;
  }
  if (!import.meta.env.SSR && item && "error" in item) {
    const error = item.error;
    throw error;
  }
  function refetch() {
    const item2 = cache2.get(key);
    if (!(item2 == null ? void 0 : item2.promise)) {
      cache2.set(key, fn(ctx), cacheTime);
    }
  }
  if (item && "value" in item) {
    return Object.assign(queryResultReference, {
      data: item.value,
      isRefetching: !!item.promise,
      refetch,
      dataUpdatedAt: item.date
    });
  }
  if (item == null ? void 0 : item.promise) {
    throw item.promise;
  }
  const result = fn(ctx);
  cache2.set(key, result, cacheTime);
  if (result instanceof Promise) {
    throw result;
  }
  return Object.assign(queryResultReference, {
    data: result,
    refetch,
    isRefetching: false,
    dataUpdatedAt: (item == null ? void 0 : item.date) ?? Date.now()
  });
}
function useRefetch(queryResult, options) {
  const {
    refetchOnWindowFocus,
    refetchInterval,
    refetchIntervalInBackground,
    staleTime,
    refetchOnReconnect
  } = options;
  useEffect(() => {
    if (!queryResult || !refetchOnWindowFocus)
      return;
    function handleVisibilityChange() {
      if (document.visibilityState === "visible" && (refetchOnWindowFocus === "always" || !queryResult.dataUpdatedAt || staleTime <= Date.now() - queryResult.dataUpdatedAt)) {
        queryResult.refetch();
      }
    }
    document.addEventListener("visibilitychange", handleVisibilityChange);
    window.addEventListener("focus", handleVisibilityChange);
    return () => {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
      window.removeEventListener("focus", handleVisibilityChange);
    };
  }, [refetchOnWindowFocus, queryResult, staleTime]);
  useEffect(() => {
    if (!refetchInterval || !queryResult)
      return;
    const id = setInterval(() => {
      if (refetchIntervalInBackground || document.visibilityState === "visible") {
        queryResult.refetch();
      }
    }, refetchInterval);
    return () => {
      clearInterval(id);
    };
  }, [refetchInterval, refetchIntervalInBackground, queryResult]);
  useEffect(() => {
    if (!refetchOnReconnect || !queryResult)
      return;
    function handleReconnect() {
      queryResult.refetch();
    }
    window.addEventListener("online", handleReconnect);
    return () => {
      window.removeEventListener("online", handleReconnect);
    };
  }, [refetchOnReconnect, queryResult]);
}
function useQueryClient() {
  const ctx = useContext(IsomorphicContext);
  return ctx.queryClient;
}
function createQueryClient(cache2) {
  return {
    getQueryData(key) {
      var _a;
      return (_a = cache2.get(key)) == null ? void 0 : _a.value;
    },
    setQueryData(key, data) {
      if (data instanceof Promise) {
        throw new TypeError("data must be synchronous");
      }
      cache2.set(key, data);
    },
    prefetchQuery(key, data) {
      cache2.set(key, data);
    },
    invalidateQueries(keys) {
      if (typeof keys === "string") {
        cache2.invalidate(keys);
        return;
      } else if (Array.isArray(keys)) {
        keys.forEach((key) => cache2.invalidate(key));
        return;
      }
      for (const key of cache2.enumerate()) {
        const shouldInvalidate = keys === void 0 || keys(key);
        if (shouldInvalidate) {
          cache2.invalidate(key);
        }
      }
    }
  };
}

// src/features/use-mutation/lib.ts
import * as __REACT_IMPORT__3 from "react";
const { useRef, useState: useState2 } = __REACT_IMPORT__3;
function useMutation(mutationFn, options = {}) {
  const [status, setStatus] = useState2("idle");
  const [data, setData] = useState2(void 0);
  const [error, setError] = useState2(void 0);
  const reset = useRef(false);
  async function doMutate(vars) {
    var _a, _b, _c, _d;
    setStatus("loading");
    await ((_a = options.onMutate) == null ? void 0 : _a.call(options, vars));
    try {
      const result = await mutationFn(vars);
      if (reset.current) {
        return;
      }
      (_b = options.onSuccess) == null ? void 0 : _b.call(options, result);
      setData(result);
      setStatus("success");
      return result;
    } catch (err) {
      if (reset.current) {
        return;
      }
      (_c = options.onError) == null ? void 0 : _c.call(options, err);
      setError(err);
      setStatus("error");
      throw err;
    } finally {
      if (!reset.current) {
        (_d = options.onSettled) == null ? void 0 : _d.call(options, data, error);
      }
    }
  }
  function mutate(vars) {
    reset.current = false;
    return doMutate(vars);
  }
  return {
    status,
    data,
    error,
    isError: status === "error",
    isIdle: status === "idle",
    isLoading: status === "loading",
    isSuccess: status === "success",
    reset() {
      setStatus("idle");
      setData(void 0);
      setError(void 0);
      reset.current = true;
    },
    mutateAsync: mutate,
    mutate(vars) {
      mutate(vars).catch(() => {
      });
    }
  };
}
function useMutations(mutationFn, options = {}) {
  const [pending, setPending] = useState2([]);
  const idRef = useRef(0);
  async function mutate(vars) {
    var _a, _b, _c, _d;
    const id = idRef.current++;
    setPending((pending2) => [...pending2, { id, vars }]);
    await ((_a = options.onMutate) == null ? void 0 : _a.call(options, id, vars));
    let data;
    let error;
    try {
      data = await mutationFn(vars);
      (_b = options.onSuccess) == null ? void 0 : _b.call(options, id, data);
      return data;
    } catch (err) {
      error = err;
      (_c = options.onError) == null ? void 0 : _c.call(options, id, err);
    } finally {
      try {
        (_d = options.onSettled) == null ? void 0 : _d.call(options, id, data, error);
      } finally {
        setPending((pending2) => pending2.filter((p2) => p2.id !== id));
      }
    }
    throw error;
  }
  return {
    mutate(vars) {
      mutate(vars).catch(() => {
      });
    },
    mutateAsync: mutate,
    pending
  };
}

// src/features/client-side-navigation/implementation.tsx
import * as React2 from "react";
const {
  forwardRef,
  useCallback,
  useContext: useContext2,
  useDeferredValue,
  useEffect: useEffect2,
  useMemo: useMemo2,
  useState: useState3,
  useSyncExternalStore: useSyncExternalStore2,
  startTransition
} = React2;
var lastRenderedId;
var navigationPromise;
var navigationResolve;
var previousNavigationIndex;
var currentNavigationIndex = 0;
function useLocation() {
  const staticLocation = useContext2(LocationContext);
  const ssrLocation = JSON.stringify([staticLocation, 0]);
  const currentLocationId = useSyncExternalStore2(
    subscribeToLocation,
    getLocationSnapshot,
    useCallback(() => ssrLocation, [ssrLocation])
  );
  const deferredLocationId = useDeferredValue(currentLocationId);
  const [currentLocation] = JSON.parse(currentLocationId);
  const [deferredLocation] = JSON.parse(deferredLocationId);
  useEffect2(() => {
    base.href = deferredLocation;
    lastRenderedId = history.state.id;
    previousNavigationIndex = currentNavigationIndex;
    currentNavigationIndex = history.state.index;
    restoreScrollPosition();
    navigationResolve == null ? void 0 : navigationResolve();
    navigationPromise = void 0;
    navigationResolve = void 0;
  }, [deferredLocationId]);
  const current = useMemo2(() => new URL(deferredLocation), [deferredLocation]);
  const pending = useMemo2(
    () => currentLocationId === deferredLocationId ? void 0 : new URL(currentLocation),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [currentLocationId, deferredLocationId]
  );
  return {
    current,
    pending
  };
}
function cancelLastNavigation() {
  if (previousNavigationIndex === void 0) {
    throw new Error("No previous navigation to cancel");
  }
  const delta = previousNavigationIndex - currentNavigationIndex;
  history.go(delta);
  currentNavigationIndex = previousNavigationIndex;
  previousNavigationIndex = void 0;
  return () => {
    history.go(-delta);
    previousNavigationIndex = currentNavigationIndex;
    currentNavigationIndex = previousNavigationIndex + delta;
  };
}
function restoreScrollPosition() {
  var _a;
  let scrollPosition = null;
  try {
    scrollPosition = sessionStorage.getItem(`rakkas:${(_a = history.state) == null ? void 0 : _a.id}`);
  } catch {
  }
  if (scrollPosition) {
    const { x: x2, y: y2 } = JSON.parse(scrollPosition);
    scrollTo(x2, y2);
  } else {
    const hash = location.hash;
    if (hash) {
      const element = document.querySelector(hash);
      if (element) {
        element.scrollIntoView();
      }
    } else {
      scrollTo(0, 0);
    }
  }
}
async function navigate(to, options) {
  const url = new URL(to, location.href);
  if (url.origin !== location.origin) {
    location.href = url.href;
    return new Promise(() => {
    });
  }
  const { replace, data, actionData } = options || {};
  const id = createUniqueId();
  if (replace) {
    history.replaceState(
      { id, data, actionData, index: history.state.index },
      "",
      to
    );
  } else {
    const index = ++nextIndex;
    history.pushState({ id, data, actionData, index }, "", to);
  }
  navigationPromise = navigationPromise || new Promise((resolve) => {
    navigationResolve = resolve;
  });
  handleNavigation();
  return navigationPromise.then(() => history.state.id === history.state.id);
}
var LocationContext = createNamedContext(
  "LocationContext",
  void 0
);
var locationChangeListeners = /* @__PURE__ */ new Set();
function subscribeToLocation(onStoreChange) {
  locationChangeListeners.add(onStoreChange);
  return () => locationChangeListeners.delete(onStoreChange);
}
var serialId = 0;
var lastLocation;
function getLocationSnapshot() {
  return JSON.stringify(lastLocation);
}
var base;
function initialize() {
  var _a;
  base = document.head.querySelector("base");
  if (!base) {
    base = document.createElement("base");
    document.head.insertBefore(base, document.head.firstChild);
  }
  base.href = location.href;
  history.replaceState(
    {
      id: createUniqueId(),
      data: null,
      actionData: (_a = history.state) == null ? void 0 : _a.actionData,
      index: 0
    },
    "",
    location.href
  );
  lastLocation = [location.href, serialId];
  addEventListener("popstate", handleNavigation);
}
async function handleNavigation() {
  const scrollPosition = { x: scrollX, y: scrollY };
  try {
    sessionStorage.setItem(
      `rakkas:${lastRenderedId}`,
      JSON.stringify(scrollPosition)
    );
  } catch {
  }
  if (!import.meta.env.SSR) {
    serialId = (serialId + 1) % 268435455;
    lastLocation = [location.href, serialId];
  }
  startTransition(() => {
    locationChangeListeners.forEach((listener) => listener());
    window.$RAKKAS_UPDATE();
  });
}
function createUniqueId() {
  return Math.random().toString(36).slice(2, 9);
}
var nextIndex = 0;
var Link = forwardRef(
  ({
    onClick,
    historyState,
    noScroll,
    replaceState,
    onNavigationStart,
    ...props
  }, ref) => /* @__PURE__ */ React2.createElement(
    "a",
    {
      ...props,
      ref,
      onClick: (e2) => {
        onClick == null ? void 0 : onClick(e2);
        if (!shouldHandleClick(e2)) {
          return;
        }
        onNavigationStart == null ? void 0 : onNavigationStart();
        navigate(e2.currentTarget.href, {
          data: historyState,
          replace: replaceState,
          scroll: !noScroll
        });
        e2.preventDefault();
      }
    }
  )
);
Link.displayName = "Link";
var StyledLink = forwardRef(
  ({
    activeClass,
    pendingClass,
    pendingStyle,
    activeStyle,
    onCompareUrls = defaultCompareUrls,
    onNavigationStart,
    className,
    style,
    ...props
  }, ref) => {
    const [navigating, setNavigating] = useState3(false);
    const { current, pending } = useLocation();
    const hasPending = !!pending;
    useEffect2(() => {
      if (!hasPending) {
        setNavigating(false);
      }
    }, [hasPending]);
    const classNames = className ? [className] : [];
    if (props.href !== void 0 && (activeClass || pendingClass || activeStyle || pendingStyle)) {
      const url = new URL(props.href, current);
      if (navigating) {
        if (pendingClass)
          classNames.push(pendingClass);
        if (pendingStyle)
          style = { ...style, ...pendingStyle };
      }
      if (current && onCompareUrls(new URL(current), url)) {
        if (activeClass)
          classNames.push(activeClass);
        if (activeStyle)
          style = { ...style, ...activeStyle };
      }
    }
    return /* @__PURE__ */ React2.createElement(
      Link,
      {
        ...props,
        ref,
        className: classNames.join(" ") || void 0,
        style,
        onNavigationStart: () => {
          setNavigating(true);
          onNavigationStart == null ? void 0 : onNavigationStart();
        }
      }
    );
  }
);
StyledLink.displayName = "StyledLink";
function defaultCompareUrls(a2, b2) {
  return a2.href === b2.href;
}
function shouldHandleClick(e2) {
  const t2 = e2.currentTarget;
  return (t2 instanceof HTMLAnchorElement || t2 instanceof SVGAElement || t2 instanceof HTMLAreaElement) && !e2.defaultPrevented && t2.href !== void 0 && e2.button === 0 && !e2.shiftKey && !e2.altKey && !e2.ctrlKey && !e2.metaKey && (!t2.target || t2.target === "_self") && !t2.hasAttribute("download") && !t2.relList.contains("external");
}
function useSubmit(options) {
  var _a;
  const { current } = useLocation();
  const pageContext = usePageContext();
  const mutation = useMutation(
    async (form) => {
      const formData = new FormData(form);
      let body = formData;
      if (form.enctype === "application/x-www-form-urlencoded") {
        const entries = Array.from(formData.entries()).filter(
          ([, v2]) => typeof v2 === "string"
        );
        body = new URLSearchParams(entries);
      }
      const response = await fetch(new URL(form.action ?? "", current), {
        method: "POST",
        body,
        headers: {
          "Content-Type": form.enctype || "application/x-www-form-urlencoded",
          Accept: "application/javascript"
        }
      });
      const text = await response.text();
      const value = (0, eval)("(" + text + ")");
      return value;
    },
    {
      ...options,
      onSuccess(value) {
        var _a2;
        if ("redirect" in value) {
          navigate(value.redirect);
        } else {
          (_a2 = options == null ? void 0 : options.onSuccess) == null ? void 0 : _a2.call(options, value.data);
          navigate(current, { replace: true, actionData: value.data });
        }
      }
    }
  );
  function submitHandler(e2) {
    e2.preventDefault();
    mutation.mutate(e2.currentTarget);
  }
  mutation.data = ((_a = mutation.data) == null ? void 0 : _a.data) ?? pageContext.actionData;
  const { data, error, isError, isIdle, isLoading, isSuccess, status } = mutation;
  return {
    submitHandler,
    data,
    error,
    isError,
    isIdle,
    isLoading,
    isSuccess,
    status
  };
}

// src/features/client-only/implementation.tsx
import * as React3 from "react";
const {
  Suspense,
  useContext: useContext3,
  useEffect: useEffect3
} = React3;
function ClientOnly(props) {
  const context = useContext3(ClientOnlyContext);
  useEffect3(() => {
    if (!context.hydrated) {
      context.setHydrated();
    }
  }, [context]);
  return /* @__PURE__ */ React3.createElement(React3.Fragment, null, context && context.hydrated ? props.children : props.fallback);
}
function ClientSuspense(props) {
  return /* @__PURE__ */ React3.createElement(ClientOnly, { fallback: props.fallback }, /* @__PURE__ */ React3.createElement(Suspense, { fallback: props.fallback }, props.children));
}
var ClientOnlyContext = createNamedContext("ClientOnlyContext", void 0);

// src/features/response-manipulation/implementation.tsx
import * as React4 from "react";
const {
  useContext: useContext4,
  useLayoutEffect,
  useRef: useRef2
} = React4;

// src/runtime/utils.ts
function escapeJson(json) {
  return json.replace(/</g, "\\u003c");
}
function encodeFileNameSafe(s2) {
  return Array.from(new TextEncoder().encode(s2)).map(
    (x2) => (x2 < 48 || x2 > 57) && (x2 < 97 || x2 > 122) ? "_" + x2.toString(16).toUpperCase().padStart(2, "0") : String.fromCharCode(x2)
  ).join("");
}

// src/features/response-manipulation/implementation.tsx
var Redirect = import.meta.env.SSR ? function Redirect2(props) {
  const redirect = useContext4(ResponseContext);
  redirect({
    redirect: true,
    status: props.status || (props.permanent ? 301 : 302),
    headers: { location: props.href }
  });
  return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(
    "script",
    {
      dangerouslySetInnerHTML: {
        __html: `window.location.href=${escapeJson(
          JSON.stringify(props.href)
        )};`
      }
    }
  ));
} : function Redirect3(props) {
  const redirected = useRef2(false);
  useLayoutEffect(() => {
    if (redirected.current)
      return;
    redirected.current = true;
    navigate(props.href, { replace: true });
  });
  return null;
};
var ResponseHeaders = import.meta.env.SSR ? function ResponseHeaders2(props) {
  const response = useContext4(ResponseContext);
  response({
    status: props.status,
    headers: props.headers,
    throttleRenderStream: props.throttleRenderStream
  });
  return /* @__PURE__ */ React4.createElement(React4.Fragment, null);
} : (
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function ResponseHeaders3(props) {
    return null;
  }
);
var ResponseContext = createNamedContext("ResponseContext", () => void 0);

// ../../node_modules/.pnpm/@babel+runtime@7.18.6/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}

// ../../node_modules/.pnpm/@babel+runtime@7.18.6/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}

// ../../node_modules/.pnpm/react-error-boundary@3.1.4_react@18.2.0/node_modules/react-error-boundary/dist/react-error-boundary.esm.js
import * as React5 from "react";
var changedArray = function changedArray2(a2, b2) {
  if (a2 === void 0) {
    a2 = [];
  }
  if (b2 === void 0) {
    b2 = [];
  }
  return a2.length !== b2.length || a2.some(function(item, index) {
    return !Object.is(item, b2[index]);
  });
};
var initialState = {
  error: null
};
var ErrorBoundary = /* @__PURE__ */ function(_React$Component) {
  _inheritsLoose(ErrorBoundary3, _React$Component);
  function ErrorBoundary3() {
    var _this;
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
    _this.state = initialState;
    _this.resetErrorBoundary = function() {
      var _this$props;
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      _this.props.onReset == null ? void 0 : (_this$props = _this.props).onReset.apply(_this$props, args);
      _this.reset();
    };
    return _this;
  }
  ErrorBoundary3.getDerivedStateFromError = function getDerivedStateFromError(error) {
    return {
      error
    };
  };
  var _proto = ErrorBoundary3.prototype;
  _proto.reset = function reset() {
    this.setState(initialState);
  };
  _proto.componentDidCatch = function componentDidCatch(error, info) {
    var _this$props$onError, _this$props2;
    (_this$props$onError = (_this$props2 = this.props).onError) == null ? void 0 : _this$props$onError.call(_this$props2, error, info);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    var error = this.state.error;
    var resetKeys = this.props.resetKeys;
    if (error !== null && prevState.error !== null && changedArray(prevProps.resetKeys, resetKeys)) {
      var _this$props$onResetKe, _this$props3;
      (_this$props$onResetKe = (_this$props3 = this.props).onResetKeysChange) == null ? void 0 : _this$props$onResetKe.call(_this$props3, prevProps.resetKeys, resetKeys);
      this.reset();
    }
  };
  _proto.render = function render() {
    var error = this.state.error;
    var _this$props4 = this.props, fallbackRender = _this$props4.fallbackRender, FallbackComponent = _this$props4.FallbackComponent, fallback = _this$props4.fallback;
    if (error !== null) {
      var _props = {
        error,
        resetErrorBoundary: this.resetErrorBoundary
      };
      if (/* @__PURE__ */ React5.isValidElement(fallback)) {
        return fallback;
      } else if (typeof fallbackRender === "function") {
        return fallbackRender(_props);
      } else if (FallbackComponent) {
        return /* @__PURE__ */ React5.createElement(FallbackComponent, _props);
      } else {
        throw new Error("react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop");
      }
    }
    return this.props.children;
  };
  return ErrorBoundary3;
}(React5.Component);
function useErrorHandler(givenError) {
  var _React$useState = React5.useState(null), error = _React$useState[0], setError = _React$useState[1];
  if (givenError != null)
    throw givenError;
  if (error != null)
    throw error;
  return setError;
}

// src/features/error-boundary/implementation.tsx
import * as React7 from "react";

// src/features/use-query/client-hooks.tsx
import * as React6 from "react";

// src/runtime/client-hooks.ts
function defineClientHooks(hooks) {
  return hooks;
}

// src/features/use-query/client-hooks.tsx
var client_hooks_default = defineClientHooks({
  extendPageContext(ctx) {
    ctx.queryClient = createQueryClient(cache);
  },
  wrapApp(app) {
    return /* @__PURE__ */ React6.createElement(Wrapper, null, app);
  }
});
var queryCache = /* @__PURE__ */ Object.create(null);
function resetErrors() {
  const subscribers = /* @__PURE__ */ new Set();
  for (const key in queryCache) {
    const item = queryCache[key];
    if ("error" in item) {
      delete item.error;
      item.subscribers.forEach((subscriber) => subscribers.add(subscriber));
    }
  }
  subscribers.forEach((subscriber) => subscriber());
}
function Wrapper({ children }) {
  return /* @__PURE__ */ React6.createElement(QueryCacheContext.Provider, { value: cache }, children);
}
var cache = {
  has(key) {
    return key in queryCache || key in $RSC;
  },
  get(key) {
    if (!queryCache[key] && key in $RSC) {
      queryCache[key] = {
        value: $RSC[key],
        subscribers: /* @__PURE__ */ new Set(),
        date: Date.now(),
        hydrated: true,
        cacheTime: DEFAULT_QUERY_OPTIONS.cacheTime
      };
      delete $RSC[key];
    }
    return queryCache[key];
  },
  set(key, valueOrPromise, cacheTime = DEFAULT_QUERY_OPTIONS.cacheTime) {
    if (valueOrPromise instanceof Promise) {
      queryCache[key] || (queryCache[key] = {
        date: Date.now(),
        hydrated: false,
        subscribers: /* @__PURE__ */ new Set(),
        cacheTime
      });
      queryCache[key] = {
        ...queryCache[key],
        promise: valueOrPromise,
        cacheTime: Math.max(queryCache[key].cacheTime, cacheTime)
      };
      delete queryCache[key].invalid;
      valueOrPromise.then(
        (value) => {
          queryCache[key] = {
            ...queryCache[key],
            value,
            hydrated: false,
            date: Date.now()
          };
          delete queryCache[key].promise;
          queryCache[key].subscribers.forEach((subscriber) => subscriber());
        },
        (error) => {
          delete queryCache[key].promise;
          queryCache[key].error = error;
          throw error;
        }
      );
    } else {
      queryCache[key] || (queryCache[key] = {
        date: Date.now(),
        hydrated: false,
        subscribers: /* @__PURE__ */ new Set(),
        cacheTime
      });
      queryCache[key] = {
        ...queryCache[key],
        value: valueOrPromise,
        hydrated: false,
        date: Date.now()
      };
      delete queryCache[key].invalid;
      delete queryCache[key].promise;
    }
    queryCache[key].subscribers.forEach((subscriber) => subscriber());
  },
  subscribe(key, fn) {
    queryCache[key] || (queryCache[key] = {
      subscribers: /* @__PURE__ */ new Set(),
      date: Date.now(),
      hydrated: false,
      cacheTime: DEFAULT_QUERY_OPTIONS.cacheTime
    });
    queryCache[key].subscribers.add(fn);
    if (queryCache[key].evictionTimeout !== void 0) {
      clearTimeout(queryCache[key].evictionTimeout);
      delete queryCache[key].evictionTimeout;
    }
    return () => {
      if (!queryCache[key])
        return;
      queryCache[key].subscribers.delete(fn);
      if (queryCache[key].subscribers.size === 0) {
        delete queryCache[key].error;
        if (queryCache[key].cacheTime === 0) {
          delete queryCache[key];
        } else if (isFinite(queryCache[key].cacheTime)) {
          queryCache[key].evictionTimeout = setTimeout(() => {
            delete queryCache[key];
          }, queryCache[key].cacheTime);
        }
      }
    };
  },
  enumerate() {
    return Object.keys(queryCache);
  },
  invalidate(key) {
    if (queryCache[key]) {
      queryCache[key] = {
        ...queryCache[key],
        invalid: true
      };
      queryCache[key].subscribers.forEach((subscriber) => subscriber());
    }
  }
};

// src/features/error-boundary/implementation.tsx
var ErrorBoundary2 = (props) => /* @__PURE__ */ React7.createElement(
  ErrorBoundary,
  {
    ...props,
    onReset: () => {
      var _a;
      resetErrors();
      (_a = props.onReset) == null ? void 0 : _a.call(props);
    }
  }
);

// src/features/run-server-side/lib-common.ts
var import_stringify = __toESM(require_stringify(), 1);
import * as __REACT_IMPORT__4 from "react";
const { useContext: useContext5 } = __REACT_IMPORT__4;
function useRequestContext() {
  return useContext5(ServerSideContext);
}
function useFormAction(desc) {
  const { url } = usePageContext();
  const [moduleId, counter, closure] = desc;
  const stringified = closure.map((x2) => (0, import_stringify.stringify)(x2));
  let closurePath = stringified.map(encodeFileNameSafe).join("/");
  if (closurePath)
    closurePath = "/" + closurePath;
  const actionPath = import.meta.env.RAKKAS_BUILD_ID + "/" + encodeURIComponent(moduleId) + "/" + counter + closurePath;
  const actionUrl = new URL(url);
  actionUrl.searchParams.set("_action", actionPath);
  return actionUrl;
}

// src/features/run-server-side/lib-client.tsx
var import_stringify2 = __toESM(require_stringify(), 1);
function runSSQImpl(_2, desc, usePostMethod = false) {
  const [moduleId, counter, closure] = desc;
  const stringified = closure.map((x2) => (0, import_stringify2.stringify)(x2));
  return sendRequest(moduleId, counter, stringified, usePostMethod);
}
function useSSQImpl(desc, options = {}) {
  const [moduleId, counter, closure] = desc;
  const { key: userKey, usePostMethod = false, ...useQueryOptions } = options;
  const stringified = closure.map((x2) => (0, import_stringify2.stringify)(x2));
  const key = userKey ?? `$ss:${moduleId}:${counter}:${stringified}`;
  return useQuery(
    key,
    () => sendRequest(moduleId, counter, stringified, usePostMethod),
    useQueryOptions
  );
}
function useSSEImpl(desc) {
  const [moduleId, counter, closure] = desc;
  const stringified = closure.map((x2) => (0, import_stringify2.stringify)(x2));
  let closurePath = stringified.map(encodeFileNameSafe).join("/");
  if (closurePath)
    closurePath = "/" + closurePath;
  const url = `/_data/${import.meta.env.RAKKAS_BUILD_ID}/` + encodeURIComponent(moduleId) + "/" + counter + closurePath + "/d.js";
  return useEventSource(url);
}
function runSSMImpl(desc) {
  const [moduleId, counter, closure, vars] = desc;
  const stringified = closure.map((x2) => (0, import_stringify2.stringify)(x2));
  return sendRequest(moduleId, counter, stringified, true, vars);
}
function useFormMutationImpl(desc, options) {
  const action = useFormAction(desc).href;
  const submit = useSubmit(options);
  return {
    action,
    ...submit
  };
}
function useSSMImpl(desc, options) {
  return useMutation((vars) => runSSMImpl([...desc, vars]), options);
}
function sendRequest(moduleId, counter, stringified, usePostMethod, vars) {
  let response;
  if (usePostMethod) {
    response = fetch(
      `/_data/${import.meta.env.RAKKAS_BUILD_ID}/` + encodeURIComponent(moduleId) + "/" + counter,
      {
        method: "POST",
        body: "[[" + stringified.join(",") + "]" + (vars !== void 0 ? "," + (0, import_stringify2.stringify)(vars) : "") + "]",
        headers: {
          "Content-Type": "application/json"
        }
      }
    );
  } else {
    let closurePath = stringified.map(encodeFileNameSafe).join("/");
    if (closurePath)
      closurePath = "/" + closurePath;
    response = fetch(
      `/_data/${import.meta.env.RAKKAS_BUILD_ID}/` + encodeURIComponent(moduleId) + "/" + counter + closurePath + "/d.js"
    );
  }
  return response.then(async (r2) => {
    if (!r2.ok) {
      if (r2.status === 404) {
        window.location.reload();
        await new Promise(() => {
        });
      }
      const message = await r2.text();
      throw new Error(message || r2.statusText);
    }
    const text = await r2.text();
    return (0, eval)("(" + text + ")");
  });
}
var useServerSideQuery = useSSQImpl;
var runServerSideQuery = runSSQImpl;
var runServerSideMutation = runSSMImpl;
var useServerSideMutation = useSSMImpl;
var useFormMutation = useFormMutationImpl;
var useServerSentEvents = useSSEImpl;

// src/runtime/client-entry.tsx
import * as React13 from "react";
const { StrictMode, Suspense: Suspense2 } = React13;
import { hydrateRoot, createRoot } from "react-dom/client";

// src/runtime/App.tsx
import * as React9 from "react";
const {
  Fragment,
  useContext: useContext6,
  useReducer
} = React9;

// src/internal/find-page.tsx
function findPage(routes, path, pageContext) {
  let originalHref = pageContext == null ? void 0 : pageContext.url.href;
  let rewritten;
  do {
    rewritten = false;
    outer:
      for (const route of routes) {
        const re = route[0];
        const match = path.match(re);
        if (!match)
          continue;
        const params = unescapeParams(match.groups || {}, route[3]);
        if (pageContext) {
          const guards = route[2] || [];
          const guardContext = {
            ...pageContext,
            params
          };
          for (const guard of guards) {
            const result = guard(guardContext);
            if (!result) {
              continue outer;
            } else if (result === true) {
              continue;
            } else if ("rewrite" in result) {
              rewritten = true;
              pageContext.url = new URL(result.rewrite, originalHref);
              originalHref = pageContext.url.href;
              path = pageContext.url.pathname;
              break outer;
            } else {
              return result;
            }
          }
        }
        return {
          route,
          params
        };
      }
  } while (rewritten);
}
function unescapeParams(params, rest) {
  for (const [key, value] of Object.entries(params)) {
    if (key === rest)
      continue;
    params[key] = decodeURIComponent(value);
  }
  return params;
}

// src/runtime/App.tsx
import prodRoutes from "virtual:rakkasjs:client-page-routes";

// src/features/pages/Default404Page.tsx
import * as React8 from "react";
function Default404Page() {
  return import.meta.env.DEV ? /* @__PURE__ */ React8.createElement(React8.Fragment, null, /* @__PURE__ */ React8.createElement(Head, { title: "Not Found" }), /* @__PURE__ */ React8.createElement("h1", null, "Not Found"), /* @__PURE__ */ React8.createElement("p", null, "This is Rakkas's default 404 page. It will ", /* @__PURE__ */ React8.createElement("b", null, "not be available"), " ", "when you build your application for production and a bare \u201CNot Found\u201D message will be displayed instead."), /* @__PURE__ */ React8.createElement("p", null, "Create a ", /* @__PURE__ */ React8.createElement("code", null, "$404.page.jsx"), " in your ", /* @__PURE__ */ React8.createElement("code", null, "routes"), " ", "directory to provide a custom 404 page.")) : /* @__PURE__ */ React8.createElement(React8.Fragment, null, /* @__PURE__ */ React8.createElement(Head, { title: "Not Found" }), /* @__PURE__ */ React8.createElement("h1", null, "Not Found"));
}

// src/runtime/App.tsx
function App(props) {
  var _a;
  const { current: url } = useLocation();
  const lastRoute = useContext6(RouteContext);
  const [updateCounter, update] = useReducer(
    (old) => old + 1 & 268435455,
    0
  );
  const forcedUpdate = (lastRoute.updateCounter || 0) !== updateCounter;
  const actionData = import.meta.env.SSR ? props.ssrActionData : (_a = history.state) == null ? void 0 : _a.actionData;
  if (!import.meta.env.SSR)
    window.$RAKKAS_UPDATE = update;
  const pageContext = useContext6(IsomorphicContext);
  pageContext.url = new URL(url);
  pageContext.actionData = actionData;
  if ("error" in lastRoute) {
    throw lastRoute.error;
  }
  if (!lastRoute.last || lastRoute.last.pathname !== pageContext.url.pathname || lastRoute.last.search !== pageContext.url.search || // lastRoute.last.actionData !== actionData ||
  forcedUpdate) {
    lastRoute.updateCounter = updateCounter;
    throw loadRoute(
      pageContext,
      lastRoute.found,
      false,
      props.beforePageLookupHandlers,
      actionData,
      props.ssrMeta,
      props.ssrPreloaded,
      props.ssrModules
    ).then((route) => {
      var _a2;
      lastRoute.last = route;
      (_a2 = lastRoute.onRendered) == null ? void 0 : _a2.call(lastRoute);
    }).catch(async () => {
      window.location.reload();
      await new Promise(() => {
      });
    });
  }
  const app = lastRoute.last.app;
  return app;
}
var RouteContext = createNamedContext(
  "RouteContext",
  {
    updateCounter: 0
  }
);
async function loadRoute(pageContext, lastFound, try404, beforePageLookupHandlers, actionData, ssrMeta, ssrPreloaded, ssrModules) {
  let found = lastFound;
  const { pathname: originalPathname } = pageContext.url;
  for (const hook of beforePageLookupHandlers) {
    const result = hook(pageContext, pageContext.url);
    if (!result)
      break;
    if (result === true)
      continue;
    if ("redirect" in result) {
      const location2 = String(result.redirect);
      return {
        pathname: originalPathname,
        search: pageContext.url.search,
        actionData,
        app: /* @__PURE__ */ React9.createElement(
          Redirect,
          {
            href: location2,
            status: result.status,
            permanent: result.permanent
          }
        )
      };
    } else {
      pageContext.url = new URL(result.rewrite, pageContext.url);
    }
  }
  let updatedComponents;
  if (!found || import.meta.hot) {
    let routes;
    let updatedRoutes;
    if (import.meta.env.PROD) {
      routes = prodRoutes;
    } else {
      routes = (await import("virtual:rakkasjs:client-page-routes")).default;
      if (import.meta.hot) {
        updatedRoutes = // ESBuild strips vite-ignore comments, so we have to use
        // eval to make Vite ignore this import.
        (await (0, eval)(
          `import("/virtual:rakkasjs:client-page-routes?" + Date.now())`
        )).default;
      }
    }
    let pathname = pageContext.url.pathname;
    let result = findPage(routes, pathname, pageContext);
    if (import.meta.hot && !result) {
      result = findPage(updatedRoutes, pathname, pageContext);
    }
    if (result && "redirect" in result) {
      const location2 = String(result.redirect);
      return {
        pathname: originalPathname,
        search: pageContext.url.search,
        actionData,
        app: /* @__PURE__ */ React9.createElement(
          Redirect,
          {
            href: location2,
            status: result.status,
            permanent: result.permanent
          }
        )
      };
    }
    found = result;
    while (!found) {
      if (!try404) {
        cancelLastNavigation();
        await new Promise((resolve) => {
          window.addEventListener("popstate", resolve, { once: true });
        });
        location.assign(pageContext.url.href);
        await new Promise(() => {
        });
      }
      if (!pathname.endsWith("/")) {
        pathname += "/";
      }
      const result2 = findPage(routes, pathname + "%24404");
      found = result2;
      if (!found && pathname === "/") {
        found = {
          params: {},
          route: [
            /^\/$/,
            [async () => ({ default: Default404Page })],
            [],
            void 0,
            []
          ]
        };
      }
      pathname = pathname.split("/").slice(0, -2).join("/") || "/";
    }
    if (import.meta.hot) {
      const foundIndex = routes.findIndex((route) => route === found.route);
      const updatedRoute = updatedRoutes[foundIndex];
      if (updatedRoute) {
        updatedComponents = await Promise.all(
          updatedRoute == null ? void 0 : updatedRoute[1].map(
            (importer) => importer().then((module) => module.default)
          )
        );
      }
    }
  }
  const importers = found.route[1];
  const preloadContext = {
    ...pageContext,
    params: found.params
  };
  const promises = importers.map(
    async (importer, i2) => Promise.resolve((ssrModules == null ? void 0 : ssrModules[importers.length - 1 - i2]) || importer()).then(
      async (module) => {
        var _a, _b;
        const preload = import.meta.hot && updatedComponents ? (_a = updatedComponents[i2]) == null ? void 0 : _a.preload : (_b = module.default) == null ? void 0 : _b.preload;
        try {
          if (!import.meta.env.SSR && i2 === window.$RAKKAS_ACTION_ERROR_INDEX) {
            throw new Error("Action error");
            delete window.$RAKKAS_ACTION_ERROR_INDEX;
          }
          const preloaded = (ssrPreloaded == null ? void 0 : ssrPreloaded[i2]) ?? await (preload == null ? void 0 : preload(preloadContext));
          return [module.default, preloaded];
        } catch (preloadError) {
          return [
            () => {
              throw preloadError;
            }
          ];
        }
      }
    )
  );
  const layoutStack = await Promise.all(promises);
  let meta;
  let preloadNode = [];
  if (import.meta.env.SSR) {
    meta = ssrMeta;
  } else {
    const preloaded = layoutStack.map((r2) => r2[1]).reverse();
    meta = {};
    preloaded.forEach((p2) => Object.assign(meta, p2 == null ? void 0 : p2.meta));
    preloadNode = preloaded.map(
      (result, i2) => ((result == null ? void 0 : result.head) || (result == null ? void 0 : result.redirect)) && /* @__PURE__ */ React9.createElement(Fragment, { key: i2 }, result == null ? void 0 : result.head, (result == null ? void 0 : result.redirect) && /* @__PURE__ */ React9.createElement(Redirect, { ...result == null ? void 0 : result.redirect }))
    ).filter(Boolean);
  }
  const components = layoutStack.map(
    (m2) => m2[0] || (({ children }) => children)
  );
  let app = components.reduce(
    (prev, Component2) => /* @__PURE__ */ React9.createElement(
      Component2,
      {
        url: pageContext.url,
        params: found.params,
        meta,
        actionData
      },
      prev
    ),
    null
  );
  if (preloadNode.length) {
    app = /* @__PURE__ */ React9.createElement(React9.Fragment, null, preloadNode, app);
  }
  return {
    pathname: originalPathname,
    search: pageContext.url.search,
    actionData,
    app
  };
}
if (import.meta.hot) {
  import.meta.hot.accept("/@id/virtual:rakkasjs:client-page-routes", () => {
  });
}

// src/features/head/client-hooks.tsx
import * as React10 from "react";
var client_hooks_default2 = defineClientHooks({
  wrapApp(app) {
    return /* @__PURE__ */ React10.createElement(q, null, app);
  }
});

// src/features/client-only/client-hooks.tsx
import * as React11 from "react";
const { useReducer: useReducer2 } = React11;
var client_hooks_default3 = defineClientHooks({
  wrapApp(app) {
    return /* @__PURE__ */ React11.createElement(ClientOnlyWrapper, null, app);
  }
});
function ClientOnlyWrapper(props) {
  const [hydrated, setHydrated] = useReducer2(() => true, false);
  return /* @__PURE__ */ React11.createElement(ClientOnlyContext.Provider, { value: { hydrated, setHydrated } }, props.children);
}

// src/features/client-side-navigation/client-hooks.tsx
import * as React12 from "react";
var client_hooks_default4 = defineClientHooks({
  beforeStart() {
    initialize();
  },
  wrapApp(app) {
    return (
      // eslint-disable-next-line ssr-friendly/no-dom-globals-in-react-fc
      /* @__PURE__ */ React12.createElement(LocationContext.Provider, { value: location.href }, app)
    );
  }
});

// src/features/isomorphic-fetch/client-hooks.ts
var client_hooks_default5 = defineClientHooks({
  extendPageContext(ctx) {
    ctx.fetch = (input, init) => fetch(input, init);
  }
});

// src/runtime/feature-client-hooks.tsx
var clientHooks = [
  client_hooks_default,
  client_hooks_default2,
  client_hooks_default3,
  client_hooks_default4,
  client_hooks_default5
];
var feature_client_hooks_default = clientHooks;

// src/runtime/client-entry.tsx
import ErrorComponent from "virtual:rakkasjs:error-page";
import commonHooks from "virtual:rakkasjs:common-hooks";
async function startClient(options = {}) {
  var _a, _b, _c;
  Object.assign(DEFAULT_QUERY_OPTIONS, options.defaultQueryOptions);
  const clientHooks2 = options.hooks ? [...feature_client_hooks_default, options.hooks] : feature_client_hooks_default;
  for (const hooks of clientHooks2) {
    if (hooks.beforeStart) {
      await hooks.beforeStart();
    }
  }
  const pageContext = {
    url: new URL(window.location.href),
    locals: {}
  };
  for (const hooks of clientHooks2) {
    await ((_a = hooks.extendPageContext) == null ? void 0 : _a.call(hooks, pageContext));
  }
  await ((_c = (_b = commonHooks).extendPageContext) == null ? void 0 : _c.call(_b, pageContext));
  const beforePageLookupHandlers = [commonHooks.beforePageLookup].filter(Boolean);
  let app = /* @__PURE__ */ React13.createElement(App, { beforePageLookupHandlers });
  if (commonHooks.wrapApp) {
    app = commonHooks.wrapApp(app);
  }
  const reverseHooks = [...clientHooks2].reverse();
  for (const hooks of reverseHooks) {
    if (hooks.wrapApp) {
      app = hooks.wrapApp(app);
    }
  }
  app = /* @__PURE__ */ React13.createElement(IsomorphicContext.Provider, { value: pageContext }, app);
  history.replaceState(
    {
      ...history.state,
      actionData: window.$RAKKAS_ACTION_DATA
    },
    ""
  );
  const route = await loadRoute(
    pageContext,
    void 0,
    true,
    beforePageLookupHandlers,
    window.$RAKKAS_ACTION_DATA
  ).catch((error) => {
    return { error };
  });
  app = /* @__PURE__ */ React13.createElement(RouteContext.Provider, { value: "error" in route ? route : { last: route } }, /* @__PURE__ */ React13.createElement(Suspense2, null, /* @__PURE__ */ React13.createElement(ErrorBoundary2, { FallbackComponent: ErrorComponent }, app)));
  if (import.meta.env.DEV && process.env.RAKKAS_STRICT_MODE === "true") {
    app = /* @__PURE__ */ React13.createElement(StrictMode, null, app);
  }
  const container = document.getElementById("root");
  window.$RAKKAS_HYDRATE ? hydrateRoot(container, app) : createRoot(container).render(app);
}

// src/features/pages/DefaultErrorPage.tsx
import * as React14 from "react";
const { useEffect: useEffect4 } = React14;
function DefaultErrorPage(props) {
  var _a, _b;
  useEffect4(() => {
    document.title = "Internal Error";
  }, []);
  const message = typeof ((_a = props.error) == null ? void 0 : _a.stack) === "string" ? props.error.stack : typeof ((_b = props.error) == null ? void 0 : _b.message) === "string" ? props.error.message : typeof props.error === "string" ? props.error : void 0;
  return import.meta.env.DEV ? /* @__PURE__ */ React14.createElement(React14.Fragment, null, /* @__PURE__ */ React14.createElement("h1", null, "Internal Error"), /* @__PURE__ */ React14.createElement("p", null, "This is Rakkas's default error page. It will", " ", /* @__PURE__ */ React14.createElement("b", null, "not be available"), " when you build your application for production and a bare \u201CInternal Error\u201D message will be displayed instead."), /* @__PURE__ */ React14.createElement("p", null, "Use ", /* @__PURE__ */ React14.createElement("code", null, "ErrorBoundary"), " to catch errors and create a", " ", /* @__PURE__ */ React14.createElement("code", null, "$error.jsx"), " in your ", /* @__PURE__ */ React14.createElement("code", null, "routes"), " directory to provide a last resort error page."), message && /* @__PURE__ */ React14.createElement(React14.Fragment, null, /* @__PURE__ */ React14.createElement("h2", null, "Error message"), /* @__PURE__ */ React14.createElement("pre", null, message)), /* @__PURE__ */ React14.createElement("p", null, /* @__PURE__ */ React14.createElement("button", { type: "button", onClick: () => location.reload() }, "Retry"))) : /* @__PURE__ */ React14.createElement(React14.Fragment, null, /* @__PURE__ */ React14.createElement("h1", null, "Internal Error"));
}
export {
  ClientOnly,
  ClientSuspense,
  DefaultErrorPage,
  ErrorBoundary2 as ErrorBoundary,
  Head,
  Link,
  Redirect,
  ResponseHeaders,
  StyledLink,
  cancelLastNavigation,
  navigate,
  runServerSideMutation as runSSM,
  runServerSideQuery as runSSQ,
  runServerSideMutation,
  runServerSideQuery,
  startClient,
  useErrorHandler,
  useFormAction,
  useFormMutation,
  useLocation,
  useMutation,
  useMutations,
  usePageContext,
  useQuery,
  useQueryClient,
  useRequestContext,
  useServerSentEvents as useSSE,
  useServerSideMutation as useSSM,
  useServerSideQuery as useSSQ,
  useServerSentEvents,
  useServerSideMutation,
  useServerSideQuery,
  useSubmit
};
/*! Bundled license information:

react-is/cjs/react-is.production.min.js:
  (** @license React v16.13.1
   * react-is.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
