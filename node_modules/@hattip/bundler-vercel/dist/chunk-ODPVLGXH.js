// src/index.ts
import { build } from "esbuild";
import { builtinModules } from "module";
import fs from "fs";
import cpr from "cpr";
import { promisify } from "util";
async function bundle(options = {}) {
  const {
    outputDir = ".vercel/output",
    clearOutputDir = true,
    staticDir,
    edgeEntry,
    serverlessEntry,
    manipulateEsbuildOptions
  } = options;
  if (!staticDir && !edgeEntry && !serverlessEntry) {
    throw new Error(
      "Must provide at least one of staticDir, edgeEntry, or serverlessEntry"
    );
  }
  if (clearOutputDir && fs.existsSync(outputDir)) {
    await fs.promises.rm(outputDir, { recursive: true, force: true });
  }
  await fs.promises.mkdir(outputDir, { recursive: true });
  if (staticDir) {
    await promisify(cpr)(staticDir, outputDir + "/static", {
      deleteFirst: true
    });
  }
  if (edgeEntry) {
    await bundleEdgeFunction(
      edgeEntry,
      outputDir + "/functions/_edge.func",
      manipulateEsbuildOptions
    );
    await fs.promises.writeFile(
      outputDir + "/functions/_edge.func/.vc-config.json",
      JSON.stringify(
        {
          runtime: "edge",
          entrypoint: "index.js"
          // TODO: Investigate and expose envVarsInUse
        },
        null,
        2
      )
    );
  }
  if (serverlessEntry) {
    await bundleServerlessFunction(
      serverlessEntry,
      outputDir + "/functions/index.func",
      manipulateEsbuildOptions
    );
    await fs.promises.writeFile(
      outputDir + "/functions/index.func/.vc-config.json",
      JSON.stringify(
        {
          runtime: "nodejs16.x",
          handler: "index.js",
          launcherType: "Nodejs"
        },
        null,
        2
      )
    );
  }
  await createConfigFile(outputDir, {
    static: !!staticDir,
    edge: !!edgeEntry,
    serverless: !!serverlessEntry
  });
}
async function bundleEdgeFunction(entry, outputDir, manipulateEsbuildOptions) {
  const esbuildOptions = {
    logLevel: "info",
    bundle: true,
    minify: true,
    entryPoints: [entry],
    outfile: outputDir + "/index.js",
    platform: "browser",
    target: "chrome96",
    format: "esm",
    mainFields: ["module", "main", "browser"],
    conditions: ["worker", "import", "require"],
    external: builtinModules
  };
  await (manipulateEsbuildOptions == null ? void 0 : manipulateEsbuildOptions(esbuildOptions, "serverless"));
  await build(esbuildOptions);
}
async function bundleServerlessFunction(entry, outputDir, manipulateEsbuildOptions) {
  const esbuildOptions = {
    logLevel: "info",
    bundle: true,
    minify: true,
    entryPoints: [entry],
    outfile: outputDir + "/index.js",
    platform: "node",
    target: "node16",
    format: "cjs",
    external: builtinModules
  };
  await (manipulateEsbuildOptions == null ? void 0 : manipulateEsbuildOptions(esbuildOptions, "serverless"));
  await build(esbuildOptions);
}
async function createConfigFile(outputDir, options) {
  const config = {
    version: 3,
    routes: [
      options.static && {
        handle: "filesystem"
      },
      options.edge && options.serverless && {
        src: ".*",
        middlewarePath: "_edge",
        continue: true
      },
      options.edge && !options.serverless && {
        src: ".*",
        dest: "_edge"
      },
      options.serverless && {
        src: ".*",
        dest: "/"
      }
    ].filter(Boolean)
  };
  await fs.promises.writeFile(
    outputDir + "/config.json",
    JSON.stringify(config, null, 2)
  );
}

export {
  bundle,
  bundleEdgeFunction,
  bundleServerlessFunction
};
