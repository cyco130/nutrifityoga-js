import { UserConfig, ResolvedConfig, InlineConfig } from 'vite';

type BuildStep = ViteBuildStep | CustomBuildStep;
interface ViteBuildStep {
    name: string;
    description?: string;
    config?: UserConfig;
    vite?: true;
}
interface CustomBuildStep {
    vite: false;
    name: string;
    description?: string;
    run(info: VaviteMultiBuildInfo, forwarded: Record<string, any>): void | Promise<void> | Record<string, any> | Promise<Record<string, any>>;
}
interface VaviteMultiBuildInfo {
    buildSteps: BuildStep[];
    currentStepIndex: number;
    currentStep: BuildStep;
}
interface MultibuildOptions {
    onMissingConfigFile?(resolvedConfig: ResolvedConfig): InlineConfig | undefined | Promise<InlineConfig | undefined>;
    onInitialConfigResolved?(resolvedConfig: ResolvedConfig): void | Promise<void>;
    onStartBuildStep?(info: VaviteMultiBuildInfo): void | Promise<void>;
}
declare function multibuild(config?: InlineConfig, options?: MultibuildOptions): Promise<void>;

export { BuildStep, CustomBuildStep, MultibuildOptions, VaviteMultiBuildInfo, ViteBuildStep, multibuild as default };
